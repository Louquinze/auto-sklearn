
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/40_advanced/example_text_preprocessing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_40_advanced_example_text_preprocessing.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_40_advanced_example_text_preprocessing.py:


==================
Text Preprocessing
==================
This example shows, how to use text features in *auto-sklearn*. *auto-sklearn*
can automatically encode text features if they are provided as string type.

For processing text features you need a pandas dataframe and set the desired
text columns to string and the categorical columns to category.

*auto-sklearn* ass text embedding creates a bag of words count
(https://scikit-learn.org/stable/tutorial/text_analytics/working_with_text_data.html).

.. GENERATED FROM PYTHON SOURCE LINES 15-27

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import sklearn.model_selection
    import sklearn.datasets
    import sklearn.metrics

    from smac.tae import StatusType

    import autosklearn.classification








.. GENERATED FROM PYTHON SOURCE LINES 28-30

Data Loading
============

.. GENERATED FROM PYTHON SOURCE LINES 30-77

.. code-block:: default


    X, y = sklearn.datasets.fetch_openml(data_id=40945, return_X_y=True)

    # on default the string columns is not assigned to the stirng features
    print(f"{X.info()}\n")

    # manuelly label all string columns
    X = X.astype({'name': 'string', 'ticket': 'string', 'cabin': 'string', 'boat': 'string',
                  'home.dest': 'string'})

    # now *auto-sklearn* handles the string columns with it text feature preprocessing pipeline

    X_train, X_test, y_train, y_test = \
         sklearn.model_selection.train_test_split(X, y, random_state=1)

    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=30,
        # Bellow two flags are provided to speed up calculations
        # Not recommended for a real implementation
        initial_configurations_via_metalearning=0,
        smac_scenario_args={'runcount_limit': 1},
    )

    cls.fit(X_train, y_train, X_test, y_test)

    predictions = cls.predict(X_test)
    print("Accuracy score", sklearn.metrics.accuracy_score(y_test, predictions))


    X, y = sklearn.datasets.fetch_openml(data_id=40945, return_X_y=True, as_frame=True)
    X = X.select_dtypes(exclude=['object'])

    X_train, X_test, y_train, y_test = \
         sklearn.model_selection.train_test_split(X, y, random_state=1)

    cls = autosklearn.classification.AutoSklearnClassifier(
        time_left_for_this_task=30,
        # Bellow two flags are provided to speed up calculations
        # Not recommended for a real implementation
        initial_configurations_via_metalearning=0,
        smac_scenario_args={'runcount_limit': 1},
    )

    cls.fit(X_train, y_train, X_test, y_test)

    predictions = cls.predict(X_test)
    print("Accuracy score without text preprocessing", sklearn.metrics.accuracy_score(y_test, predictions))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 1309 entries, 0 to 1308
    Data columns (total 13 columns):
     #   Column     Non-Null Count  Dtype   
    ---  ------     --------------  -----   
     0   pclass     1309 non-null   float64 
     1   name       1309 non-null   object  
     2   sex        1309 non-null   category
     3   age        1046 non-null   float64 
     4   sibsp      1309 non-null   float64 
     5   parch      1309 non-null   float64 
     6   ticket     1309 non-null   object  
     7   fare       1308 non-null   float64 
     8   cabin      295 non-null    object  
     9   embarked   1307 non-null   category
     10  boat       486 non-null    object  
     11  body       121 non-null    float64 
     12  home.dest  745 non-null    object  
    dtypes: category(2), float64(6), object(5)
    memory usage: 115.4+ KB
    None

    Accuracy score 0.5945121951219512
    Accuracy score without text preprocessing 0.7835365853658537





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  40.570 seconds)


.. _sphx_glr_download_examples_40_advanced_example_text_preprocessing.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/automl/auto-sklearn/master?urlpath=lab/tree/notebooks/examples/40_advanced/example_text_preprocessing.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: example_text_preprocessing.py <example_text_preprocessing.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: example_text_preprocessing.ipynb <example_text_preprocessing.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
